#[cfg(test)]
mod tests {
    use crate::*;

    #[test]
    fn lab1() {
        assert_eq!(add("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB",
                       "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7"),
                   "10F51035ED319BC50C0C4503B4D44872FC7DE7FC00F5DE863D6520E3906FC3E7E8761505118C918DB31AADBEA5A054B13A25F259CD47C1FAA7DB9B76F2DB450861BA26C4794E8E3BFBC2924DE45E47E5408536E3548A03591DA0556D595AB78C55149F45170F2CB7736A46976D1C09BFCE4DF6EAB040599AF235968F8070E25C2");
        assert_eq!(add("87D6D58D3991D536544389CEFA72FD0EBED75B2EBDC2C79BC3717793108F0952011E7E2D7040FFFB32F10BEB8ED0A485026B6860020B230128A8222B0525A6888942FB01C537800BF25D6F021D4B99D3CBD6DF9055FA22F91A6CFC4FDFC408AEF78F6418D3CE4E20EC7888B61BAE3D73C27C257CCA905DE0353C3A7CFFD9FE15",
                       "791EDB102DA183759979CEF70E1405AF14B98CD44357EADF6A8E35E49F99BB56CBD3F68897D6E05502ED1DE14EC46D04F96992C2D129737987E84E62371648B37633794016852A8CBFFCFDE06B17EC216AE8914D59E677A15A90361A594F0D1524A41AE63C59D343D4E522646722B0292DD7C85571AC9A84FDA6CD2D8DE307F6"),
                   "100F5B09D673358ABEDBD58C6088702BDD390E803011AB27B2DFFAD77B028C4A8CCF274B60817E05035DE29CCDD951189FBD4FB22D334967AB090708D3C3BEF3BFF767441DBBCAA98B25A6CE2886385F536BF70DDAFE09A9A74FD326A391315C41C337EFF10282164C15DAB1A82D0ED9CF053EDD23C3CF86532E307AA8DBD060B");

        assert_eq!(mul("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB",
                       "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7"),
                   "30A120B609DCBE28B09CA92E12DD29D77AE6400DC22B026AFB5FB945AAF62B57F4E48BD299261F02BBB35DD2495B5CD2713BF0E30192DAE1B334659160C8552423F0AD7FB82870920DF4E9B57980EAD2ADA9F3EF4B5D0718AB7F1053700395278998CB9AD48498D65150E3E837B0BB169D432B441424557061F838A17C65F90A31105F599BF69B87485BF9C70F51D37A417E476E372558C26782AC8C8F35C3D1227E851D8A72CD708700FD90C5E17F22C4EA15730345E56BD76F04B54580813CBE306B4404C6F34BCD9840D2911E6B3CF6DE3EE428C274EDF0A97335D8256DA26FCD67BA5450593A15F6B527ECE76FBBE20F7A882347614AF4B7FAF55086659D");

        assert_eq!(sub("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB",
                       "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7"),
                   "9A531EB436073A5B899CEAEF7CFEEE386318967D8CAA2000BCF598BA51261E38AE874C932360023620DA0CAF90CEC25EB7F21C1A55A3A9F327AE7CA879634C73FC1F9E7256D38E258EE860B509506BAE185E180C06CC8DFBC23316BA1B357240BE81B14C9EC0A25A73AE85C0049185BD4A8D7E29F9F82A7C2FBFEF68174229F4");
    }

    #[test]
    fn lab2() {
        assert_eq!(barret_reduction("D4D2110984907B5625309D956521BAB4157B8B1ECE04043249A3D379AC112E5B9AF44E721E148D88A942744CF56A06B92D28A0DB950FE4CED2B41A0BD38BCE7D0BE1055CF5DE38F2A588C2C9A79A75011058C320A7B661C6CE1C36C7D870758307E5D2CF07D9B6E8D529779B6B2910DD17B6766A7EFEE215A98CAC300F2827DB",
                                    "3A7EF2554E8940FA9B93B2A5E822CC7BB262F4A14159E4318CAE3ABF5AEB1022EC6D01DEFAB48B528868679D649B445A753684C13F6C3ADBAB059D635A2882090FC166EA9F0AAACD16A062149E4A0952F7FAAB14A0E9D3CB0BE9200DBD3B0342496421826919148E617AF1DB66978B1FCD28F8408506B79979CCBCC7F7E5FDE7",
                                    "10F51035ED319BC50C0C4503B4D44872FC7DE7FC00F5DE863D6520E3906FC3E7E8761505118C918DB31AADBEA5A054B13A25F259CD47C1FAA7DB9B76F2DB450861BA26C4794E8E3BFBC2924DE45E47E5408536E3548A03591DA0556D595AB78C55149F45170F2CB7736A46976D1C09BFCE4DF6EAB040599AF235968F8070E25C2"),
                   "25553a0998f4b866527585a3acb95540fe52ad3b09f6579da399233b9b4ffdf2d5ad48d52df6eb9110093d74c79839a9cd851297d6cb343bd1a341e1c5124861dc9cd09d18be388b61a79c8bccbc59082868c1e2c4f8e665aa60d69ea0bf6bbc2bb96e47cc8e793db0b8a20937626f7db03b8da8efeabb493c2675d827762e26".to_uppercase());
    }

    #[test]
    fn lab3() {
        assert_eq!(srom3::add("0101", "1111"), "1010");
        assert_eq!(srom3::add("0101", "1111"), "1010");
        assert_eq!(srom3::add("10111010010001010010011011110000111010000011010101011010010010101001101101110100100001011011001111001111000111100111000111110110101101010001110100101100000100100000110101111100111001011111110110101111011001001111111100010011001111100",
                              "10010011101110111000111000010110110110100011110000000000101000111000000100100000111110011110111100111000101111001101101111011100100111110111100111010110110110001110110000100011111001000110101100011100000001011011101010011000011110111"),
                                 "101001111111101010100011100110001100100000100101011010111010010001101001010100011111000101110011110111101000101010101000101010001010100110010011111010110010101110000101011111000000011001011010110011011000010100010110001011010001011"
        );
        assert_eq!("11011", srom3::mul("1001", "11"));

        assert_eq!(srom3::mul("10111010010001010010011011110000111010000011010101011010010010101001101101110100100001011011001111001111000111100111000111110110101101010001110100101100000100100000110101111100111001011111110110101111011001001111111100010011001111100",
                              "10010011101110111000111000010110110110100011110000000000101000111000000100100000111110011110111100111000101111001101101111011100100111110111100111010110110110001110110000100011111001000110101100011100000001011011101010011000011110111"),
                                 "11101101111001101001110111010101110010011110111101000111000101100001010010100110001110010001101010111001101010101100011111111100100111001011010100001100110010101101100100101101001010001110000111111110101011100001001001101110111101110")
    }

    #[test]
    fn lab4() {
        unsafe {
            matrix_find();
            assert_eq!(srom4::add("101101", "111010"), "10111"); // result is 010111 but func trim 0
            let a = "01";
            let b = "011";
            let c = "01";
            assert_eq!(mul(add(a,b).as_str(), c),
                       add(mul(b, c).as_str(), mul(a, c).as_str()))
        }
    }
}
